{
  "Variables": [],
  "Objects": [
    {
      "Key": "G7_Description",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#g7",
          "#datamodel"
        ],
        "Description": "Grafcet (description)",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "gui.text(out)"
      }
    },
    {
      "Key": "G7_Graphic",
      "Value": {
        "BaseGuid": null,
        "Guid": "e6934f0e-eb91-4ec8-bfed-0471250f22d0",
        "Tags": [
          "#g7",
          "#graphgen"
        ],
        "Description": "Grafcet (visuel)",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [
          {
            "Key": "g7",
            "Value": {
              "target": "G7_Description",
              "tags": [
                "#g7",
                "#datamodel"
              ]
            }
          }
        ],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "#construit un tableau à 2D de taille fixe contenant les informations de dessin\r\n#chaque cellule est déterminé par sa position X,Y en tant que clé, les cellules vides ne sont pas représentées\r\n#la logique de répartition des étapes est basé sur le principe suivant:\r\n# 1. A partir de l'étape 0 positionne toutes les étapes immédiatement en dessous (colonne 0 vertical)\r\n# 2. Pour tous les autres cas, chaque étape est inséré dans le tableau. A chaque insertion les lignes et colonnes existantes sont prolongées (insert_row, insert_col) et la nouvelle étape inséré\r\nimport ast\r\nimport clr\r\nclr.AddReference(\"System\")\r\nfrom System import Decimal\r\nfrom System.Globalization import CultureInfo\r\ncontenu = g7.text()\r\n#trace une connexion en conservant l'existant\r\ndef trace(donnees, pos, lignes):\r\n    if pos not in donnees:\r\n      donnees[pos] = { 'type' : lignes }\r\n    else:\r\n      set1 = set(lignes.split(','))\r\n      set2 = set(donnees[pos]['type'].split(','))\r\n      donnees[pos]['type'] = ','.join(set1.union(set2))\r\n#recherche les prochaines étapes en suivant les connections\r\ndef trouver_prochaine_etape(donnees, cle_depart):\r\n    colonne, ligne = cle_depart\r\n    trouve=set()\r\n    faits=set()\r\n    faits.add(cle_depart)\r\n    return trouver_prochaine_etape2(donnees, cle_depart, trouve, faits)\r\ndef trouver_prochaine_etape2(donnees, cle_depart, trouve=set(), faits=set()):\r\n    colonne, ligne = cle_depart\r\n    if 'Etape' in donnees[cle_depart]['type'] and cle_depart not in faits:\r\n      trouve.add(cle_depart)\r\n      return trouve # on s'arrete la si on tombe sur une nouvelle etape\r\n    faits.add(cle_depart)\r\n    if 'Droite' in donnees[cle_depart]['type'] and (colonne+1, ligne) in donnees and (colonne+1, ligne) not in faits:\r\n      trouver_prochaine_etape2(donnees, (colonne+1, ligne), trouve, faits)\r\n    if 'Gauche' in donnees[cle_depart]['type'] and (colonne-1, ligne) in donnees and (colonne-1, ligne) not in faits:\r\n      trouver_prochaine_etape2(donnees, (colonne-1, ligne), trouve, faits)\r\n    if 'Bas' in donnees[cle_depart]['type'] and (colonne, ligne+1) in donnees and (colonne, ligne+1) not in faits:\r\n      trouver_prochaine_etape2(donnees, (colonne, ligne+1), trouve, faits)\r\n    return trouve\r\n#insert une colonne en maintenant les connections cohérentes\r\ndef exists_col(data, col_index):\r\n    for (x, y), value in data.items():\r\n        if x == col_index:\r\n            return True\r\n    return False\r\n#insert une colonne en maintenant les connections cohérentes\r\ndef insert_col(data, col_index):\r\n    # Décale les positions\r\n    new_data = {}\r\n    if col_index < 0:\r\n        for (x, y), value in data.items():\r\n            if x <= col_index:\r\n                new_data[(x - 1, y)] = value  # décale la ligne\r\n            else:\r\n                new_data[(x, y)] = value\r\n        # Ajout les lignes intermediaires\r\n        for (x, y) in new_data.copy():\r\n            if x == col_index - 1 and (x + 2,y) in new_data:\r\n                right = new_data[(x + 2,y)]['type'].split(',')\r\n                left = new_data[(x,y)]['type'].split(',')\r\n                if ('Droite' in left and 'Gauche' in right):\r\n                    new_data[(x + 1, y)] = { \"type\": \"Gauche,Droite\" }\r\n    else:\r\n        for (x, y), value in data.items():\r\n            if x >= col_index:\r\n                new_data[(x + 1, y)] = value  # décale la ligne\r\n            else:\r\n                new_data[(x, y)] = value\r\n        # Ajout les lignes intermediaires\r\n        for (x, y) in new_data.copy():\r\n            if x == col_index + 1 and (x - 2,y) in new_data:\r\n                left = new_data[(x - 2,y)]['type'].split(',')\r\n                right = new_data[(x,y)]['type'].split(',')\r\n                if ('Droite' in left and 'Gauche' in right):\r\n                    new_data[(x - 1, y)] = { \"type\": \"Gauche,Droite\" }\r\n    return new_data\r\n#insert une ligne en maintenant les connections cohérentes\r\ndef insert_row(data, row_index):\r\n    # Décale les positions\r\n    new_data = {}\r\n    for (x, y), value in data.items():\r\n        if y >= row_index:\r\n            new_data[(x, y + 1)] = value  # décale la colonne\r\n        else:\r\n            new_data[(x, y)] = value\r\n    # Ajout les lignes intermediaires\r\n    for (x, y) in new_data.copy():\r\n        if y == row_index + 1 and (x,y - 2) in new_data:\r\n            up = new_data[(x,y - 2)]['type'].split(',')\r\n            down = new_data[(x,y)]['type'].split(',')\r\n            if ('Bas' in up and 'Haut' in down) or ('Etape' in up and 'Haut' in down) or ('Bas' in up and 'Etape' in down) or ('Etape' in up and 'Transition' in down) or ('Transition' in up and 'Etape' in down) or ('Transition' in up and 'Haut' in down) or ('Bas' in up and 'Transition' in down):\r\n                new_data[(x, y - 1)] = {\r\n                  \"type\": \"Haut,Bas\"\r\n                }\r\n    return new_data\r\n#\r\n# Initialisation des dictionnaires\r\n#\r\ncarte = {} # tableau des éléments par position X,Y\r\netapes = {} # liste des étapes et leurs descriptions\r\ntransitions = {} # liste des transitions et leurs descriptions\r\n# Traitement ligne par ligne\r\nfor ligne in contenu.strip().splitlines():\r\n    ligne = ligne.strip()\r\n    if ligne.startswith(\"Etape\"):\r\n        # Exemple: Etape 1 \"Initiale\"\r\n        parts = ligne.split(\" \", 2)\r\n        numero = Decimal.Parse(parts[1], CultureInfo.InvariantCulture)\r\n        label = parts[2].strip('\"')\r\n        etapes[numero] = label\r\n    elif ligne.startswith(\"Transition\"):\r\n        # Exemple: Transition 1>2 \"Choix1\"\r\n        parts = ligne.split(\" \", 2)\r\n        source_dest = parts[1].split(\">\")\r\n        source = Decimal.Parse(source_dest[0], CultureInfo.InvariantCulture)\r\n        destination = Decimal.Parse(source_dest[1], CultureInfo.InvariantCulture)\r\n        label = parts[2].strip('\"')\r\n        transitions[(source, destination)] = label\r\netapes = dict(sorted(etapes.items(), key=lambda item: item[0]))\r\ntransitions = dict(sorted(transitions.items(), key=lambda item: item[0][0]))\r\n#\r\n# Filtrer les éléments contenant 'id' et les trier par la valeur de 'id'\r\n#\r\n#filtered = {k: v for k, v in transitions.items() if k[1] > k[0]}# exclue les renvois, a traiter en dernier (pour éviter les décalages de colonnes)\r\n#resultat = sorted(filtered.keys(), key=lambda x: (x[0], x[1]))\r\nresultat = sorted(transitions.keys(), key=lambda x: (x[0], x[1]))\r\nrealized = []\r\n#\r\n# commence par mettre en série les premières étapes (colonne 0)\r\n#\r\ny = 0\r\ntrans = False\r\nfor i in range(0, len(resultat)):\r\n  next_trans = resultat[i]\r\n  # Ajoute les transitions initiales\r\n  if not trans or (trans[0] != next_trans[0] and next_trans[0] == trans[1] and trans[1] < next_trans[1]): # premiere transition ou la transition est d'une source différente et est liée à la précédente\r\n    desc = transitions[next_trans] if next_trans else \"\"\r\n    carte[(0, y)] = {\r\n        \"id\": str(next_trans[0]),\r\n        \"type\": \"Bas,Etape\",\r\n        \"nom\": etapes[next_trans[0]]\r\n    }\r\n    y += 1\r\n    carte[(0, y)] = {\r\n        \"type\": \"Haut,Bas,Transition\",\r\n        \"nom\": desc\r\n    }\r\n    y += 1\r\n    carte[(0, y)] = {\r\n        \"id\": str(next_trans[1]),\r\n        \"type\": \"Haut,Bas,Etape\",\r\n        \"nom\": etapes[next_trans[1]]\r\n    }\r\n    realized.append(next_trans)\r\n    trans = next_trans\r\n#supprime du résultat les transitions déjà faites\r\n#resultat = {k: v for k, v in transitions.items() if k not in realized}\r\nfor key in realized:\r\n  resultat.pop(resultat.index(key))\r\nprint('transitions réalisés',realized)\r\nprint('transitions restantes',resultat)\r\n#\r\n# Affichage des résultats\r\n#\r\nprint(\"Étapes :\")\r\nfor k, v in etapes.items():\r\n  print(f\"Etape {k} \\\"{v}\\\"\")\r\nprint(\"\\nTransitions :\")\r\nfor (src, dst) in resultat:\r\n  label = transitions[(src, dst)]\r\n  print(f\"Transition {src} > {dst} : {label}\")\r\nprint(\"\\n\")\r\n#\r\n# poursuit avec les cas particuliers\r\n#\r\nfor trans in resultat:\r\n  desc = transitions[trans]\r\n  print(desc)\r\n#  if trans == (3.1, 4):\r\n#     break\r\n  # obtient la position de l'étape source dans la carte\r\n  for pos in carte:\r\n     if 'id' in carte[pos] and carte[pos]['id'] == trans[0]:\r\n        print(\"trans et dans carte à \",pos)\r\n  indice = [pos for pos in carte if 'id' in carte[pos] and carte[pos]['id'] == str(trans[0]) and 'type' in carte[pos] and 'Etape' in carte[pos]['type']][0]\r\n  # obtient la position de l'étape destination dans la carte\r\n  indiceDst = [pos for pos in carte if 'id' in carte[pos] and carte[pos]['id'] == str(trans[1]) and 'type' in carte[pos] and 'Etape' in carte[pos]['type']]\r\n  if len(indiceDst) > 0:\r\n    indiceDst=indiceDst[0]\r\n  else:\r\n    indiceDst=False\r\n  print(trans, '=> from', indice, 'to', indiceDst)\r\n  # obtient les étapes suivantes dans la carte\r\n  # Cas 1 : Ajoute une étape sur la droite\r\n  if indice[0] == 0 and not indiceDst:\r\n    print(\"Cas 1 : Ajoute l'étape\",trans[1],\"sur la droite\")\r\n    if (indice[0],indice[1]+1) in carte and 'Droite' in carte[(indice[0],indice[1]+1)]['type']: # il y a plusieurs étapes a droite sur cette ligne\r\n      # recherche la prochaine position libre à droite\r\n      pos = (indice[0]+1,indice[1]+1)\r\n      while pos in carte:\r\n          pos = (pos[0]+1, pos[1])\r\n      num_ligne = indice[1]+3 # numero de ligne sur lequel ajouter une étape (à coté des autres)\r\n      position_max_x = pos[0] # obtient l'étape la plus à droite\r\n      # 1.2 : Ajoute une étape immédiatement à droite de la dernière étape (reprend la ligne de transition)\r\n      carte = insert_col(carte,position_max_x+1)\r\n      carte = insert_col(carte,position_max_x+1)\r\n      carte[(position_max_x+2,num_ligne)] = {\r\n          \"id\": str(trans[1]),\r\n          \"type\": \"Haut,Bas,Etape\",\r\n          \"nom\": etapes[trans[1]]\r\n      }\r\n      carte[(position_max_x+2,num_ligne-1)] = {\r\n          \"type\": \"Haut,Bas,Transition\",\r\n          \"nom\": desc\r\n      }\r\n      trace(carte, (position_max_x+2,num_ligne-2),\"Gauche,Bas\")\r\n      trace(carte, (position_max_x+1,num_ligne-2),\"Gauche,Droite\")\r\n      trace(carte, (position_max_x,num_ligne-2),\"Gauche,Droite\")\r\n      trace(carte, (position_max_x-1,num_ligne-2),\"Gauche,Droite\")\r\n    else: # il n'y a pas d'autres etapes à droite\r\n      # si il existe des elements au dessus de l'étape, on décale l'existant\r\n      found = [pos for pos in carte if pos[0] == indice[0]+2 and pos[1] <= indice[1]]\r\n      if found:\r\n        carte = insert_col(carte,indice[0]+2)\r\n        carte = insert_col(carte,indice[0]+2)\r\n      # 1.1 : Ajoute une étape immédiatement à droite de la première étape (décale la transition)\r\n      print(\"il n'y a qu'une étape centrale sur cette ligne\")\r\n      carte = insert_row(carte,indice[1]+1)\r\n      trace(carte, (indice[0],indice[1]+1), \"Haut,Droite\")\r\n      trace(carte, (indice[0]+1,indice[1]+1), \"Gauche,Droite\")\r\n      trace(carte, (indice[0]+2,indice[1]+1), \"Gauche,Bas\")\r\n      carte[(indice[0]+2,indice[1]+2)] = {\r\n          \"type\": \"Haut,Bas,Transition\",\r\n          \"nom\": desc\r\n      }\r\n      carte[(indice[0]+2,indice[1]+3)] = {\r\n          \"id\": str(trans[1]),\r\n          \"type\": \"Haut,Bas,Etape\",\r\n          \"nom\": etapes[trans[1]]\r\n      }\r\n  # Cas 1' : Ajoute une étape sur la droite en décalé\r\n  if indice[0] > 0 and not indiceDst:\r\n    print(\"Cas 1' : Ajoute l'étape\",trans[1],\"sur la droite en décalé\")\r\n    if (indice[0],indice[1]+1) in carte and 'Droite' in carte[(indice[0],indice[1]+1)]['type']: # il y a plusieurs étapes a droite sur cette ligne\r\n      # recherche la prochaine position libre à droite\r\n      print(\"il y a plusieurs étapes a droite sur cette ligne\")\r\n      pos = (indice[0]+1,indice[1]+1)\r\n      while pos in carte:\r\n          pos = (pos[0]+1, pos[1])\r\n      num_ligne = indice[1]+3 # numero de ligne sur lequel ajouter une étape (à coté des autres)\r\n      position_max_x = pos[0] # obtient l'étape la plus à droite\r\n      # 1.2 : Ajoute une étape immédiatement à droite de la dernière étape (reprend la ligne de transition)\r\n      carte = insert_col(carte,position_max_x+1)\r\n      carte = insert_col(carte,position_max_x+1)\r\n      carte[(position_max_x+2,num_ligne)] = {\r\n          \"id\": str(trans[1]),\r\n          \"type\": \"Haut,Bas,Etape\",\r\n          \"nom\": etapes[trans[1]]\r\n      }\r\n      carte[(position_max_x+2,num_ligne-1)] = {\r\n          \"type\": \"Haut,Bas,Transition\",\r\n          \"nom\": desc\r\n      }\r\n      trace(carte, (position_max_x+2,num_ligne-2),\"Gauche,Bas\")\r\n      trace(carte, (position_max_x+1,num_ligne-2),\"Gauche,Droite\")\r\n      trace(carte, (position_max_x,num_ligne-2),\"Gauche,Droite\")\r\n      trace(carte, (position_max_x-1,num_ligne-2),\"Gauche,Droite\")\r\n    else: # il n'y a pas d'autres etapes à droite\r\n      print(\"il n'y a pas d'autres etapes à droite\")\r\n      # 1.1 : Ajoute une étape immédiatement à droite de la première étape (décale la transition)\r\n      print(\"il n'y a qu'une étape centrale sur cette ligne\")\r\n      carte = insert_row(carte,indice[1]+1)\r\n      trace(carte, (indice[0],indice[1]+1), \"Haut,Droite\")\r\n      trace(carte, (indice[0]+1,indice[1]+1), \"Gauche,Droite\")\r\n      trace(carte, (indice[0]+2,indice[1]+1), \"Gauche,Bas\")\r\n      carte[(indice[0]+2,indice[1]+2)] = {\r\n          \"type\": \"Haut,Bas,Transition\",\r\n          \"nom\": desc\r\n      }\r\n      carte[(indice[0]+2,indice[1]+3)] = {\r\n          \"id\": str(trans[1]),\r\n          \"type\": \"Haut,Bas,Etape\",\r\n          \"nom\": etapes[trans[1]]\r\n      }\r\n  # Cas 2 : Relie une étape de droite sur la gauche\r\n  # Si l'étape source de trouve à droite et la destination sur la gauche (tron principal)\r\n  elif indice[0] > 0 and indiceDst and indiceDst[0] == 0:\r\n    print(\"Cas 2 : Relie une étape de droite sur la gauche\")\r\n    # si il existe des elements sous l'étape entre la source et la destination, on se contente d'un renvoi\r\n    found = [pos for pos in carte if pos[0] == indice[0] and pos[1] > indice[1] and pos[1] < indiceDst[1]]\r\n    if len(found)>0:\r\n      # 2.1 : Ajoute un renvoi car l'espace dessous est occuper par d'autres élements (impossible de dessiner la ligne)\r\n      carte = insert_row(carte,indice[1]+1)\r\n      carte = insert_row(carte,indice[1]+1)\r\n      indiceDst = (indiceDst[0],indiceDst[1]+2)# décalage suite insertion\r\n      carte[(indice[0],indice[1]+1)] = {\r\n          \"type\": \"Haut,Bas,Transition\",\r\n          \"nom\": desc\r\n      }\r\n      carte[(indice[0],indice[1]+2)] = {\r\n          \"id\": str(trans[1]),\r\n          \"type\": \"Renvoi\"\r\n      }\r\n    # recherche la branche de connexion\r\n    elif indiceDst[0] == 0:# la destination se trouve sur la colonne 0\r\n      if 'Droite' not in carte[(indiceDst[0],indiceDst[1]-1)]['type']:# si il n'y a pas d'embranchement à droite au dessus de la destination, on l'insert\r\n        if 'Gauche' not in carte[(indiceDst[0],indiceDst[1]-1)]['type']:# il n'y a pas non plus de ligne dédié à l'embranchement à gauche, on l'insert\r\n          carte = insert_row(carte,indiceDst[1])\r\n          indiceDst = (indiceDst[0],indiceDst[1]+1)# décalage suite insertion\r\n        trace(carte, (indiceDst[0],indiceDst[1]-1),\"Bas,Droite\")\r\n      trace(carte, (indice[0],indice[1]+1),\"Haut,Bas,Transition\")\r\n      carte[(indice[0],indice[1]+1)][\"nom\"] = desc;\r\n      for y in range(indice[1]+1,indiceDst[1]-1):# trace la ligne verticale\r\n        trace(carte, (indice[0],y),\"Haut,Bas\")\r\n      trace(carte, (indice[0],indiceDst[1]-1),\"Haut,Gauche\")# trace la jonction a gauche \r\n      for x in range(indiceDst[0]+1,indice[0]):\r\n        trace(carte, (x,indiceDst[1]-1),\"Gauche,Droite\")# trace la ligne horizontale\r\n  # Cas 3 : Relie une étape de gauche sur la gauche\r\n  # Si l'étape source et la destination de trouve à gauche (tron principal)\r\n  elif indice[0] == 0 and indiceDst and indiceDst[0] == 0 and indice[1] < indiceDst[1]:\r\n      print(\"Cas 3 : Relie une étape de gauche sur la gauche\")\r\n      pos = (indice[0]-1,indice[1]+1)\r\n      # si il existe déjà une colonne sur la gauche, on insert une nouvelle \r\n      # l'insertion se fait toujours depuis l'interieur\r\n#      if exists_col(carte, -1):\r\n#        carte = insert_col(carte,-1)\r\n      # embranchement sous la source\r\n      if 'Gauche' not in carte[(indice[0],indice[1]+1)]['type']:# si il n'y a pas d'embranchement à gauche au dessous de la source, on l'insert\r\n        print(\"Gauche...\")\r\n        if 'Droite' not in carte[(indice[0],indice[1]+1)]['type']:# il n'y a pas non plus de ligne dédié à l'embranchement à droite, on l'insert\r\n          carte = insert_row(carte,indice[1]+1)\r\n          indiceDst = (indiceDst[0],indiceDst[1]+1)# décalage suite insertion\r\n        trace(carte, (indice[0],indice[1]+1),\"Gauche,Haut\")# trace la jonction a gauche \r\n        trace(carte, (indice[0]-1,indice[1]+1),\"Bas,Droite\")# trace la jonction en bas\r\n        trace(carte, (indice[0]-1,indice[1]+2),\"Bas,Haut,Transition\")# trace la ligne verticale avec transition\r\n        carte[(indice[0]-1,indice[1]+2)][\"nom\"] = desc;\r\n      else:\r\n        #il y a un embranchement à gauche au dessous de la source, on determine l'offset sur X du nouveau tracé...\r\n      \tprint(\"il y a un embranchement à gauche au dessous de la source, on determine l'offset sur X du nouveau tracé...\")\r\n      \twhile pos in carte:\r\n      \t  pos = (pos[0]-1, pos[1])\r\n      \ttrace(carte, pos, \"Droite,Bas\")# trace la jonction a gauche \r\n      \ttrace(carte, (pos[0],pos[1]+1),\"Bas,Haut,Transition\")# trace la ligne verticale avec transition\r\n      \tcarte[(pos[0],pos[1]+1)][\"nom\"] = desc;\r\n      # embranchement au dessus de la destination\r\n      if 'Gauche' not in carte[(indiceDst[0],indiceDst[1]-1)]['type']:# si il n'y a pas d'embranchement à gauche au dessus de la destination, on l'insert\r\n        if 'Droite' not in carte[(indiceDst[0],indiceDst[1]-1)]['type']:# il n'y a pas non plus de ligne dédié à l'embranchement à droite, on l'insert\r\n          carte = insert_row(carte,indiceDst[1])\r\n          indiceDst = (indiceDst[0],indiceDst[1]+1)# décalage suite insertion\r\n        trace(carte, (indiceDst[0],indiceDst[1]-1),\"Gauche\")\r\n      #trace la verticale\r\n      for y in range(pos[1]+2,indiceDst[1]-1):\r\n        trace(carte, (pos[0],y),\"Haut,Bas\")\r\n      trace(carte, (pos[0],indiceDst[1]-1),\"Haut,Droite\")\r\n      #trace l'horizontal\r\n      if pos[0] < indiceDst[0]-1:\r\n        for x in range(pos[0],indiceDst[0]-1):\r\n          trace(carte, (x,pos[1]-1),\"Gauche,Droite\")\r\n      carte = insert_col(carte,-1)\r\n  # Cas 4 : Relie une étape du bas vers le haut\r\n  # On crée une étape de renvoi pour éviter de complexifier le schéma\r\n  elif indiceDst and indiceDst[1] <= indice[1]:\r\n    print(\"Cas 4 : Relie une étape du bas vers le haut\")\r\n    # ajoute une étape juste en dessous\r\n    if (indice[0],indice[1]+1) in carte and 'Droite' not in carte[(indice[0],indice[1]+1)]['type']: # il n'y a pas d'autres etapes à droite\r\n      print(\"il n'y a pas d'autres etapes à droite\")\r\n      # 1.1 : Ajoute une étape immédiatement à droite de la première étape (décale la transition)\r\n      carte = insert_row(carte,indice[1]+1)\r\n      trace(carte, (indice[0],indice[1]+1), \"Haut,Bas,Droite\")\r\n      trace(carte, (indice[0]+1,indice[1]+1), \"Gauche,Droite\")\r\n      trace(carte, (indice[0]+2,indice[1]+1), \"Gauche,Bas\")\r\n      carte[(indice[0]+2,indice[1]+2)] = {\r\n          \"type\": \"Haut,Bas,Transition\",\r\n          \"nom\": desc\r\n      }\r\n      carte[(indice[0]+2,indice[1]+3)] = {\r\n          \"id\": str(trans[1]),\r\n          \"type\": \"Renvoi\"\r\n      }\r\n    else: # il y a plusieurs étapes a droite sur cette ligne\r\n      print(\"il y a plusieurs étapes a droite sur cette ligne\")\r\n      # recherche la prochaine position libre à droite\r\n      pos = (indice[0]+1,indice[1]+1)\r\n      while pos in carte:\r\n          pos = (pos[0]+1, pos[1])\r\n      num_ligne = indice[1]+1 # numero de ligne sur lequel ajouter une étape (à coté des autres)\r\n      position_max_x = pos[0] # obtient l'étape la plus à gauche\r\n      # 1.2 : Ajoute une étape immédiatement à droite de la dernière étape (reprend la ligne de transition)\r\n      carte = insert_col(carte,position_max_x+1)\r\n      carte = insert_col(carte,position_max_x+1)\r\n      carte[(position_max_x+2,num_ligne)] = {\r\n          \"id\": str(trans[1]),\r\n          \"type\": \"Renvoi\",\r\n          \"nom\": etapes[trans[1]]\r\n      }\r\n      carte[(position_max_x+2,num_ligne-1)] = {\r\n          \"type\": \"Haut,Bas,Transition\",\r\n          \"nom\": desc\r\n      }\r\n      trace(carte, (position_max_x+2,num_ligne-2),\"Gauche,Bas\")\r\n      trace(carte, (position_max_x+1,num_ligne-2),\"Gauche,Droite\")\r\n      trace(carte, (position_max_x,num_ligne-2),\"Gauche,Droite\")\r\n# Affichage du résultat\r\nprint(\"Carte :\")\r\nprint(\"{\")\r\nfor x in range(6):\r\n    for coord in sorted(carte.keys(), key=lambda x: (x[1], x[0])):\r\n        if coord[0] == x:\r\n          print(f\"  {coord} : {carte[coord]}\")\r\nprint(\"}\")\r\nout.write(repr(carte))",
        "ObjectCode": "",
        "DrawCode": "import ast\r\nimport clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('PresentationFramework')\r\nclr.AddReference('WindowsBase')\r\nimport System\r\nfrom System.Windows import Point, FlowDirection, TextAlignment\r\nfrom System.Windows.Media import Typeface, Brushes, Pen, FormattedText\r\nfrom System.Windows.Media import GeometryGroup, RectangleGeometry, LineGeometry, StreamGeometry\r\nfrom System.Globalization import CultureInfo\r\nfrom System.Windows import Rect\r\n# Affiche un texte dans la zone définit\r\ndef draw_text_in_rect(dc, text, rect, font_size=14, color=Brushes.Black, h_align=\"center\", v_align=\"center\"):\r\n    formatted = FormattedText(\r\n        text,\r\n        CultureInfo.CurrentCulture,\r\n        FlowDirection.LeftToRight,\r\n        Typeface(\"Segoe UI\"),\r\n        font_size,\r\n        color,\r\n        1.25\r\n    )\r\n    formatted.MaxTextWidth = rect.Width\r\n    formatted.MaxTextHeight = rect.Height\r\n    # Alignement horizontal avec enum\r\n    h_align_map = {\r\n        \"left\": TextAlignment.Left,\r\n        \"center\": TextAlignment.Center,\r\n        \"right\": TextAlignment.Right,\r\n        \"justify\": TextAlignment.Justify\r\n    }\r\n    formatted.TextAlignment = h_align_map.get(h_align.lower(), TextAlignment.Left)\r\n    # Alignement vertical\r\n    if v_align.lower() == \"center\":\r\n        y_offset = rect.Y + (rect.Height - formatted.Height) / 2\r\n    elif v_align.lower() == \"bottom\":\r\n        y_offset = rect.Y + rect.Height - formatted.Height\r\n    else:\r\n        y_offset = rect.Y\r\n    dc.DrawText(formatted, Point(rect.X, y_offset))\r\n# Constantes\r\nMARGE_X = 6 # marge horizontal\r\nCASE_SIZE = 40  # taille d'une case en pixels\r\n# Dictionnaire pour stocker les éléments avec leur position\r\nelements = ast.literal_eval(str(out.text()))\r\n# Dessin\r\npen = Pen(Brushes.Black, 1)\r\nfor (x, y), data in elements.items():\r\n    px, py = x * CASE_SIZE, y * CASE_SIZE\r\n    center = Point(px + CASE_SIZE / 2, py + CASE_SIZE / 2)\r\n    if 'Haut' in data['type']:\r\n        line1 = LineGeometry(Point(px + CASE_SIZE / 2, py), Point(px + CASE_SIZE / 2, py + CASE_SIZE / 2))\r\n        dc.DrawGeometry(None, pen, line1)\r\n    if 'Bas' in data['type']:\r\n        line1 = LineGeometry(Point(px + CASE_SIZE / 2, py + CASE_SIZE / 2), Point(px + CASE_SIZE / 2, py + CASE_SIZE))\r\n        dc.DrawGeometry(None, pen, line1)\r\n    if 'Gauche' in data['type']:\r\n        line1 = LineGeometry(Point(px, py + CASE_SIZE / 2), Point(px + CASE_SIZE / 2, py + CASE_SIZE / 2))\r\n        dc.DrawGeometry(None, pen, line1)\r\n    if 'Droite' in data['type']:\r\n        line1 = LineGeometry(Point(px + CASE_SIZE / 2, py + CASE_SIZE / 2), Point(px + CASE_SIZE, py + CASE_SIZE / 2))\r\n        dc.DrawGeometry(None, pen, line1)\r\n    if 'Etape' in data['type']:\r\n        rect = RectangleGeometry(System.Windows.Rect(px, py, CASE_SIZE, CASE_SIZE))\r\n        dc.DrawGeometry(Brushes.LightGray, pen, rect)\r\n        if 'id' in data and data['id'] != 0:\r\n            # Calcule la position pour centrer le texte\r\n            rect = Rect(px, py, CASE_SIZE, CASE_SIZE)\r\n            dc.PushClip(RectangleGeometry(rect))\r\n            draw_text_in_rect(dc, data['id'], rect, font_size=18, color=Brushes.Black, h_align=\"center\", v_align=\"center\")\r\n            dc.Pop()\r\n        if 'nom' in data:\r\n            # Calcule la zone du texte\r\n            rect = Rect(px + CASE_SIZE + 4, py, CASE_SIZE - 4, CASE_SIZE)\r\n            # étend le rectangle horizontalement si il y a des cases vides à droite\r\n            for xx in range(x+2,x+8):\r\n               if not (xx,y) in elements:\r\n                  rect.Width = rect.Width + CASE_SIZE\r\n               else:\r\n                  break\r\n            dc.PushClip(RectangleGeometry(rect))\r\n            draw_text_in_rect(dc, data['nom'], rect, font_size=14, color=Brushes.Black, h_align=\"left\", v_align=\"center\")\r\n            dc.Pop()\r\n    if 'Renvoi' in data['type']:\r\n        cx = px + CASE_SIZE / 2\r\n        cy = py + CASE_SIZE / 4\r\n        ofs = CASE_SIZE / 4\r\n        mid = CASE_SIZE / 2\r\n        # Coordonnées du triangle\r\n        p1 = Point(cx, cy)\r\n        p2 = Point(cx + ofs, cy - ofs)\r\n        p3 = Point(cx - ofs, cy - ofs)\r\n        geometry = StreamGeometry()\r\n        with geometry.Open() as ctx:  # type: StreamGeometryContext\r\n            ctx.BeginFigure(p1, True, True)  # True = filled, True = closed\r\n            ctx.LineTo(p2, True, False)\r\n            ctx.LineTo(p3, True, False)\r\n        dc.DrawGeometry(Brushes.Black, pen, geometry)\r\n        if 'id' in data and data['id'] != 0:\r\n            # Calcule la position pour centrer le texte\r\n            rect = Rect(px+mid/2, cy, CASE_SIZE-mid, CASE_SIZE-mid)\r\n            dc.DrawGeometry(Brushes.Transparent, pen, RectangleGeometry(rect))\r\n            draw_text_in_rect(dc, data['id'], rect, font_size=14, color=Brushes.Black, h_align=\"center\", v_align=\"center\")\r\n    if 'Transition' in data['type']:\r\n        line1 = LineGeometry(Point(px + CASE_SIZE * 0.3, py + CASE_SIZE / 2), Point(px + CASE_SIZE * 0.7, py + CASE_SIZE / 2))\r\n        dc.DrawGeometry(None, pen, line1)\r\n        if 'nom' in data:\r\n            # Calcule la zone du texte\r\n            rect = Rect(px + CASE_SIZE, py, CASE_SIZE, CASE_SIZE)\r\n            # étend le rectangle horizontalement si il y a des cases vides à droite\r\n            for xx in range(x+2,x+8):\r\n               if not (xx,y) in elements:\r\n                  rect.Width = rect.Width + CASE_SIZE\r\n               else:\r\n                  break\r\n            dc.PushClip(RectangleGeometry(rect))\r\n            draw_text_in_rect(dc, data['nom'], rect, font_size=10, color=Brushes.Black, h_align=\"left\", v_align=\"center\")\r\n            dc.Pop()"
      }
    },
    {
      "Key": "Chapitre1",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 1 : Une faille dans le ciel",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [
          {
            "Key": "g7",
            "Value": {
              "target": "G7_Description",
              "tags": []
            }
          }
        ],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "def insert_row(positions: set[tuple[int, int]], row_index: int) -> set[tuple[int, int]]:\r\n    \"\"\"\r\n    Insère une ligne à l'index spécifié (row_index), \r\n    en décalant vers le bas toutes les lignes à partir de cet index.\r\n    \"\"\"\r\n    new_positions = set()\r\n    for x, y in positions:\r\n        if x >= row_index:\r\n            new_positions.add((x + 1, y))  # décale les lignes après ou égales à row_index\r\n        else:\r\n            new_positions.add((x, y))\r\n    return new_positions\r\ndef insert_column(positions: set[tuple[int, int]], col_index: int) -> set[tuple[int, int]]:\r\n    \"\"\"\r\n    Insère une colonne à l'index spécifié (col_index),\r\n    en décalant vers la droite toutes les colonnes à partir de cet index.\r\n    \"\"\"\r\n    new_positions = set()\r\n    for x, y in positions:\r\n        if y >= col_index:\r\n            new_positions.add((x, y + 1))  # décale les colonnes après ou égales à col_index\r\n        else:\r\n            new_positions.add((x, y))\r\n    return new_positions\r\n# Initialisation des dictionnaires\r\ncarte = {}\r\netapes = {}\r\ntransitions = {}\r\n# Traitement ligne par ligne\r\ncontenu = g7.text()\r\nfor ligne in contenu.strip().splitlines():\r\n    ligne = ligne.strip()\r\n    if ligne.startswith(\"Etape\"):\r\n        # Exemple: Etape 1 \"Initiale\"\r\n        parts = ligne.split(\" \", 2)\r\n        numero = parts[1]\r\n        label = parts[2].strip('\"')\r\n        etapes[numero] = label\r\n    elif ligne.startswith(\"Transition\"):\r\n        # Exemple: Transition 1>2 \"Choix1\"\r\n        parts = ligne.split(\" \", 2)\r\n        source_dest = parts[1].split(\">\")\r\n        source = source_dest[0]\r\n        destination = source_dest[1]\r\n        label = parts[2].strip('\"')\r\n        transitions[(source, destination)] = label\r\n# Affichage des résultats\r\ns = \"\"\r\nprint(\"Étapes :\")\r\nprint(etapes)\r\nfor k, v in etapes.items():\r\n    s += (f\"Etape ({k} (0,0,0) \\\"{v}\\\"\\n\")\r\nprint(\"\\nTransitions :\")\r\nprint(transitions)\r\nfor (src, dst), label in transitions.items():\r\n    s += (f\"  {src} > {dst} : {label}\\n\")\r\n# Ajouter la première étape (1) dans la carte avec la position (0,0)",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre2",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 2 : Une langue inconnue",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre3",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 3 : La quête commence",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre4",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 4 : Périls et décisions",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre5",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 5 : La Base de Skarh’th",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre6",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 6 : La poursuite continue…",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre7",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 7 : Les Abysses de Velmor",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "ChapitreFinal",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre Final : Le Dernier Choix",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre8",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 8 : Xeros Prime et le choix du retour",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Fin1",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "FIN 1 : Rentrer sur Terre",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Fin2",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "FIN 2 : Rester pour bâtir un pont entre les mondes",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Chapitre9",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#text"
        ],
        "Description": "Chapitre 9 : Xeros Prime et le choix du retour",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "gui.edit(editor,out)",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "G7_Template_CS",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#template",
          "#cs"
        ],
        "Description": "Grafcet Template (C#)",
        "InitialDataBase64": "",
        "Editor": "code",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "G7_CodeGen",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#codegen",
          "#cs",
          "#g7"
        ],
        "Description": "Grafcet Code Generator",
        "InitialDataBase64": "",
        "Editor": "code.cs",
        "Pointers": [
          {
            "Key": "data",
            "Value": {
              "target": "G7_Description",
              "tags": []
            }
          },
          {
            "Key": "template",
            "Value": {
              "target": "G7_Template_Dart",
              "tags": [
                "#template"
              ]
            }
          }
        ],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "#construit le code générique des instances du grafcet\r\nimport ast\r\nimport clr\r\nclr.AddReference(\"System\")\r\nfrom System import Decimal\r\nfrom System.Globalization import CultureInfo\r\nfrom Scriban import Template\r\ncontenu = data.text()\r\ntpl = template.text()\r\n#\r\n# Initialisation des dictionnaires\r\n#\r\ndata = { 'etapes' : [], 'transitions':[] }\r\ncarte = {} # tableau des éléments par position X,Y\r\netapes = {} # liste des étapes et leurs descriptions\r\ntransitions = {} # liste des transitions et leurs descriptions\r\n# Traitement ligne par ligne\r\nfor ligne in contenu.strip().splitlines():\r\n    ligne = ligne.strip()\r\n    if ligne.startswith(\"Etape\"):\r\n        # Exemple: Etape 1 \"Initiale\"\r\n        parts = ligne.split(\" \", 2)\r\n        numero = Decimal.Parse(parts[1], CultureInfo.InvariantCulture)\r\n        label = parts[2].strip('\"')\r\n        data['etapes'].append({ 'numero': numero, 'label': label })\r\n    elif ligne.startswith(\"Transition\"):\r\n        # Exemple: Transition 1>2 \"Choix1\"\r\n        parts = ligne.split(\" \", 2)\r\n        source_dest = parts[1].split(\">\")\r\n        source = Decimal.Parse(source_dest[0], CultureInfo.InvariantCulture)\r\n        destination = Decimal.Parse(source_dest[1], CultureInfo.InvariantCulture)\r\n        condition = parts[2].strip('\"')\r\n        data['transitions'].append({ 'source': source, 'destination': destination, 'condition': condition })\r\n# construit le code\r\nresult = Template.Parse(tpl).Render(data)\r\nout.write(result)",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "LayoutMain",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#layout"
        ],
        "Description": "Vue Principale",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('PresentationFramework')\r\nclr.AddReference('WindowsBase')\r\nimport System\r\nfrom System.Windows import Point, FlowDirection, TextAlignment\r\nfrom System.Windows.Media import Typeface, Brushes, Pen, FormattedText\r\nfrom System.Windows.Media import GeometryGroup, RectangleGeometry, LineGeometry, StreamGeometry\r\nfrom System.Globalization import CultureInfo\r\nfrom System.Windows import Rect\r\n# Variables globales fournies :\r\n# drawingContext : DrawingContext WPF\r\n# canvasWidth, canvasHeight : dimensions de la surface à dessiner\r\n# Exemple de texte multi-lignes\r\ntext = out.text()\r\n# Parser en lignes et supprimer les espaces avant/après\r\ntemplate = [line.strip() for line in text.splitlines() if line.strip()]\r\nmax_len = max(len(zone) for zone in template)  # la plus longue zone (100%)\r\n# Couleurs pour chaque zone\r\ncurrent_color = 0\r\nzone_colors = [\r\n    \"#FFB0C4DE\",\r\n    \"#FFD8BFD8\",\r\n    \"#FFADD8E6\",\r\n    \"#FFB0E0E6\"\r\n]\r\n# Fonction pour extraire le nom et la largeur relative\r\ndef parse_zone(zone_text):\r\n    # exemple: \"[HEADER________________]\"\r\n    zone_name = zone_text.split(\"_\")[0].strip(\"[]\")\r\n    width_pct = len(zone_text) / max_len  # max caractères = 100%\r\n    return zone_name, width_pct\r\n# Dessin\r\ncanvasHeight = rect.Height\r\ncanvasWidth = rect.Width\r\ny_offset = 0\r\nline_height = canvasHeight / len(template)  # hauteur proportionnelle à la ligne\r\nfor line in template:\r\n    # Découper les zones dans la ligne\r\n    import re\r\n    zones = re.findall(r\"\\[[^\\]]+\\]\", line)\r\n    x_offset = 0\r\n    for zone in zones:\r\n        name, width_pct = parse_zone(zone)\r\n        width_px = width_pct * canvasWidth\r\n        # Dessiner le rectangle\r\n        brush = System.Windows.Media.SolidColorBrush(System.Windows.Media.ColorConverter.ConvertFromString(zone_colors[current_color]))\r\n        dc.DrawRectangle(brush, None, System.Windows.Rect(x_offset, y_offset, width_px, line_height))\r\n        # Dessiner le texte\r\n        formatted_text = System.Windows.Media.FormattedText(\r\n            name,\r\n            System.Globalization.CultureInfo.CurrentCulture,\r\n            System.Windows.FlowDirection.LeftToRight,\r\n            System.Windows.Media.Typeface(\"Segoe UI\"),\r\n            14,\r\n            System.Windows.Media.Brushes.Black,\r\n            1.0\r\n        )\r\n        text_x = x_offset + 5\r\n        text_y = y_offset + (line_height - formatted_text.Height)/2\r\n        dc.DrawText(formatted_text, System.Windows.Point(text_x, text_y))\r\n        x_offset += width_px\r\n        current_color = current_color+1 if current_color+1<len(zone_colors) else 0\r\n    y_offset += line_height"
      }
    },
    {
      "Key": "G7_Template_Dart",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#template",
          "#dart"
        ],
        "Description": "Grafcet Template (Dart)",
        "InitialDataBase64": "",
        "Editor": "code.dart",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Histoire_Template_Dart",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#template",
          "#dart"
        ],
        "Description": "String Template (Dart)",
        "InitialDataBase64": "",
        "Editor": "code.dart",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Histoire_CodeGen",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#codegen"
        ],
        "Description": "Histoire Code Generator",
        "InitialDataBase64": "",
        "Editor": "code",
        "Pointers": [
          {
            "Key": "template",
            "Value": {
              "target": "Histoire_Template_Dart",
              "tags": []
            }
          },
          {
            "Key": "chapitre1",
            "Value": {
              "target": "Chapitre1",
              "tags": []
            }
          },
          {
            "Key": "chapitre2",
            "Value": {
              "target": "Chapitre2",
              "tags": []
            }
          },
          {
            "Key": "chapitre3",
            "Value": {
              "target": "Chapitre3",
              "tags": []
            }
          },
          {
            "Key": "chapitre4",
            "Value": {
              "target": "Chapitre4",
              "tags": []
            }
          },
          {
            "Key": "chapitre5",
            "Value": {
              "target": "Chapitre5",
              "tags": []
            }
          },
          {
            "Key": "chapitre6",
            "Value": {
              "target": "Chapitre6",
              "tags": []
            }
          },
          {
            "Key": "chapitre7",
            "Value": {
              "target": "Chapitre7",
              "tags": []
            }
          },
          {
            "Key": "chapitre8",
            "Value": {
              "target": "Chapitre8",
              "tags": []
            }
          },
          {
            "Key": "chapitreFinal",
            "Value": {
              "target": "ChapitreFinal",
              "tags": []
            }
          },
          {
            "Key": "Fin1",
            "Value": {
              "target": "Fin1",
              "tags": []
            }
          },
          {
            "Key": "Fin2",
            "Value": {
              "target": "Fin2",
              "tags": []
            }
          },
          {
            "Key": "chapitre9",
            "Value": {
              "target": "Chapitre9",
              "tags": []
            }
          }
        ],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "#construit le code générique des instances du grafcet\r\nimport ast\r\nimport clr\r\nclr.AddReference(\"System\")\r\nfrom System import Decimal\r\nfrom System.Globalization import CultureInfo\r\nfrom Scriban import Template\r\ntpl = template.text()\r\n#\r\n# Initialisation des dictionnaires\r\n#\r\ndata = { \r\n'chapitre1' : chapitre1.text(),\r\n'chapitre2' : chapitre3.text(),\r\n'chapitre3' : chapitre3.text(),\r\n'chapitre4' : chapitre4.text(),\r\n'chapitre5' : chapitre5.text(),\r\n'chapitre6' : chapitre6.text(),\r\n'chapitre7' : chapitre7.text(),\r\n'chapitre8' : chapitre8.text(),\r\n'chapitre9' : chapitre9.text(),\r\n'chapitreFinal' : chapitreFinal.text(),\r\n'Fin1' : Fin1.text(),\r\n'Fin2' : Fin2.text(),\r\n}\r\n# construit le code\r\nresult = Template.Parse(tpl).Render(data)\r\nout.write(result)",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Objets",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [],
        "Description": "Liste des objets et leurs descriptions",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Courier New\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Objets_CodeGen",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#dart",
          "#codegen"
        ],
        "Description": "Objets Code (Dart)",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [
          {
            "Key": "objs",
            "Value": {
              "target": "Objets",
              "tags": []
            }
          }
        ],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "#construit le code générique des instances du grafcet\r\nimport ast\r\nimport clr\r\nclr.AddReference(\"System\")\r\nfrom System import Decimal\r\nfrom System.Globalization import CultureInfo\r\nfrom Scriban import Template\r\ncontenu = objs.text()\r\ntpl = \"\"\"\r\nMap<String, String> descriptionsObjets = {\r\n{{- for i in objects}}\r\n    \"Objet{{i.name}}\": \"{{i.value}}\",\r\n{{- end}}\r\n  };\r\n\"\"\"\r\n#\r\n# Initialisation des dictionnaires\r\n#\r\ndata = { 'objects' : [] }\r\n# Traitement ligne par ligne\r\nfor ligne in contenu.strip().splitlines():\r\n    parts = ligne.strip().split(\":\", 2)\r\n    data['objects'].append({'name':parts[0].strip(),'value':parts[1].strip()})\r\n# construit le code\r\nresult = Template.Parse(tpl).Render(data)\r\nout.write(result)",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Images",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [],
        "Description": "Etats des images",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Courier New\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    },
    {
      "Key": "Images_CodeGen",
      "Value": {
        "BaseGuid": null,
        "Guid": null,
        "Tags": [
          "#dart"
        ],
        "Description": "Images Code (Dart)",
        "InitialDataBase64": "",
        "Editor": "text",
        "Pointers": [
          {
            "Key": "objs",
            "Value": {
              "target": "Images",
              "tags": []
            }
          }
        ],
        "Functions": [],
        "Properties": [],
        "UserAction": "",
        "LoopMethod": "",
        "InitMethod": "",
        "BuildMethod": "#construit le code générique des instances du grafcet\r\nimport ast\r\nimport clr\r\nclr.AddReference(\"System\")\r\nfrom System import Decimal\r\nfrom System.Globalization import CultureInfo\r\nfrom Scriban import Template\r\ncontenu = objs.text()\r\ntpl = \"\"\"\r\n// images States\r\n{{- for i in objects}}\r\nbool get {{i.name}} => ({{i.value}});\r\n{{- end}}\r\n\"\"\"\r\n#\r\n# Initialisation des dictionnaires\r\n#\r\ndata = { 'objects' : [] }\r\n# Traitement ligne par ligne\r\nfor ligne in contenu.strip().splitlines():\r\n    parts = ligne.strip().split(\":\", 2)\r\n    data['objects'].append({'name':parts[0].strip(),'value':parts[1].strip().replace('And','&&').replace('Or','||').replace('Not','!')})\r\n# construit le code\r\nresult = Template.Parse(tpl).Render(data)\r\nout.write(result)",
        "ObjectCode": "",
        "DrawCode": "import clr\r\nclr.AddReference('PresentationCore')\r\nclr.AddReference('WindowsBase')\r\nfrom System.Windows import Point, Rect, Size, FontStyles, FontWeights, FontStretches, TextTrimming\r\nfrom System.Windows.Media import Brushes, Typeface, FormattedText, Pen\r\nfrom System.Windows.Media import FontFamily\r\nfrom System.Windows import FlowDirection\r\nfrom System.Globalization import CultureInfo\r\ndef dessiner_rectangle_contenu(drawingContext):\r\n    # Dessiner le rectangle avec fond et contour\r\n    drawingContext.DrawRectangle(Brushes.LightGray, \r\n                                 Pen(Brushes.Black, 1), \r\n                                 rect)\r\n    # Définir les textes : titre et description\r\n    titre = \"Titre du rectangle\"\r\n    description = \"Ceci est une description\\nmultiligne du contenu.\"\r\n    # Définir la police et le style de texte\r\n    typeface = Typeface(FontFamily(\"Segoe UI\"), \r\n                        FontStyles.Normal,\r\n                        FontWeights.Bold, \r\n                        FontStretches.Normal)\r\n    # Texte du titre\r\n    formattedTitre = FormattedText(desc,\r\n                                   CultureInfo.CurrentCulture,\r\n                                   FlowDirection.LeftToRight,\r\n                                   typeface,\r\n                                   14,  # Taille du texte\r\n                                   Brushes.Black,\r\n                                   1.0)  # PixelsPerDip\r\n    # Texte de la description\r\n    typefaceDesc = Typeface(FontFamily(\"Segoe UI\"), \r\n                            FontStyles.Normal,\r\n                            FontWeights.Normal, \r\n                            FontStretches.Normal)\r\n    formattedDescription = FormattedText(out.text(),\r\n                                         CultureInfo.CurrentCulture,\r\n                                         FlowDirection.LeftToRight,\r\n                                         typefaceDesc,\r\n                                         12,\r\n                                         Brushes.Black,\r\n                                         1.0)\r\n    formattedDescription.MaxTextWidth = rect.Width - 20\r\n    # Positionner le texte dans le rectangle\r\n    drawingContext.DrawText(formattedTitre, Point(rect.X + 10, rect.Y + 10))\r\n    drawingContext.DrawText(formattedDescription, Point(rect.X + 10, rect.Y + 35))\r\ndessiner_rectangle_contenu(dc)"
      }
    }
  ],
  "References": [],
  "Facets": [
    {
      "Key": "Conception",
      "Value": {
        "Description": "-44.23725638522521,-83.25872141537033,866.6687158223579,613.0095794841068",
        "Objects": [
          {
            "Key": "G7_Description",
            "Value": {
              "zone": "-7.777544773426399,86.27763743369314,488.0256634472654,671.8492584269962",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "G7_Graphic",
            "Value": {
              "zone": "908.4819032207424,84.67361988477072,779.5558785319433,1390.5153777809505",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Objets",
            "Value": {
              "zone": "-5.908021977900205,873.7435312897278,682.442586687154,118.88864287675091",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Images",
            "Value": {
              "zone": "-6.4821702993551185,1037.1271115130558,809.8803089709944,162.46033101202715",
              "background": null,
              "TitlePos": "TopLeft"
            }
          }
        ],
        "Commands": [],
        "Geometries": [],
        "Texts": []
      }
    },
    {
      "Key": "Histoire",
      "Value": {
        "Description": "-332.90433617724796,-381.32335472075505,1039.9867536108538,735.60038670036",
        "Objects": [
          {
            "Key": "Fin2",
            "Value": {
              "zone": "7136.619429242338,650.4912417577148,465.8567767302852,336.34995310894533",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre1",
            "Value": {
              "zone": "-896.3546272502481,263.10862535530237,420.9102507967385,301.6530630006532",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre2",
            "Value": {
              "zone": "-375.85899866958493,261.4605977169008,472.9497509259395,297.3164379898865",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre3",
            "Value": {
              "zone": "202.10452016511067,291.58725193822625,460.8221938657583,261.5621763578023",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre4",
            "Value": {
              "zone": "814.6481863697675,271.4322952177415,436.58786741208814,276.3720425239341",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre5",
            "Value": {
              "zone": "1403.216840511034,264.0596072523735,729.4771151400112,1042.1557748709602",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre6",
            "Value": {
              "zone": "2336.9542103679587,257.43498037679274,429.8561100638465,238.67420137378025",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre7",
            "Value": {
              "zone": "3062.1773289399134,255.62972898914347,749.9817228822124,1118.0538693201077",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre8",
            "Value": {
              "zone": "4179.91592538837,245.81739973768737,493.1346291373188,256.1767704792088",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "ChapitreFinal",
            "Value": {
              "zone": "6371.72667890883,253.88572944102873,401.5827292012309,270.98663664534064",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Fin1",
            "Value": {
              "zone": "7179.138832476883,55.33250740754676,437.7920171072834,436.2493856644621",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Chapitre9",
            "Value": {
              "zone": "5017.284612130099,256.4937147002182,959.6619571874351,1204.451163111632",
              "background": null,
              "TitlePos": "TopLeft"
            }
          }
        ],
        "Commands": [],
        "Geometries": [
          {
            "path": "M 0,0 L 64,-1 M 54,4 L 64,-1 L 53,-5",
            "X": -463.1013798603486,
            "Y": 391.46123767581116
          },
          {
            "path": "M 0,0 L 67,-1 M 57,4 L 67,-1 L 56,-5",
            "X": 105.05894033125605,
            "Y": 410.3101582508881
          },
          {
            "path": "M 0,0 L 92,0 M 82,5 L 92,0 L 82,-5",
            "X": 675.7555982024728,
            "Y": 391.01711671651805
          },
          {
            "path": "M 0,0 L 102,1 M 91,5 L 102,1 L 92,-4",
            "X": 1265.4575419084508,
            "Y": 391.0171167165178
          },
          {
            "path": "M 0,0 L 168,0 M 158,5 L 168,0 L 158,-5",
            "X": 2146.133993733801,
            "Y": 374.6787874343097
          },
          {
            "path": "M 0,0 L 233,1 M 222,5 L 233,1 L 223,-4",
            "X": 2799.6558455078466,
            "Y": 354.51873031017453
          },
          {
            "path": "M 0,0 L 283,6 M 272,10 L 283,6 L 273,0",
            "X": 3866.8507133428284,
            "Y": 378.04630431039857
          },
          {
            "path": "M 0,0 L 220,0 M 210,5 L 220,0 L 210,-5",
            "X": 4737.577650397835,
            "Y": 352.82303516983836
          },
          {
            "path": "M 0,0 L 311,3 M 300,7 L 311,3 L 301,-2",
            "X": 6006.497728574719,
            "Y": 367.7259251922412
          },
          {
            "path": "M 0,0 L 256,-531 M 256,-519 L 256,-531 L 247,-524",
            "X": 6828.099491404501,
            "Y": 355.670277918362
          },
          {
            "path": "M 0,0 L 250,-12 M 240,-6 L 250,-12 L 239,-16",
            "X": 6853.113584237852,
            "Y": 368.17732433503716
          },
          {
            "path": "M 0,0 L 287,375 M 276,370 L 287,375 L 284,364",
            "X": 6815.592444987827,
            "Y": 430.7125564184121
          },
          {
            "path": "M 0,0 L 281,712 M 272,704 L 281,712 L 281,700",
            "X": 6815.592444987827,
            "Y": 468.23369566843667
          },
          {
            "path": "M 0,0 L 345,-118 M 337,-110 L 345,-118 L 333,-119",
            "X": 6795.549944493317,
            "Y": 341.71872973829835
          },
          {
            "path": "M 0,0 L 328,362 M 317,357 L 328,362 L 324,351",
            "X": 6789.794674243178,
            "Y": 451.0688644909416
          }
        ],
        "Texts": []
      }
    },
    {
      "Key": "Application",
      "Value": {
        "Description": "0,0,1000,1000",
        "Objects": [
          {
            "Key": "Images_CodeGen",
            "Value": {
              "zone": "-456.51636993783063,-54.859181283175985,620.092627924369,209.17294545403303",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "G7_CodeGen",
            "Value": {
              "zone": "227.57081692515726,-320.2939232695119,929.2490850710137,2455.3997420255428",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Histoire_CodeGen",
            "Value": {
              "zone": "1364.9973814143295,-321.33689921498933,2007.5275941553132,4119.628939473313",
              "background": null,
              "TitlePos": "TopLeft"
            }
          },
          {
            "Key": "Objets_CodeGen",
            "Value": {
              "zone": "-452.0324516531265,-329.44043840342556,565.6621630967443,190.41099276917635",
              "background": null,
              "TitlePos": "TopLeft"
            }
          }
        ],
        "Commands": [],
        "Geometries": [],
        "Texts": []
      }
    },
    {
      "Key": "Interface",
      "Value": {
        "Description": "0,0,1000,1000",
        "Objects": [
          {
            "Key": "LayoutMain",
            "Value": {
              "zone": "155.78044513628663,182.07908120242467,1128.839704896043,1080.8853118712273",
              "background": null,
              "TitlePos": "TopLeft"
            }
          }
        ],
        "Commands": [],
        "Geometries": [],
        "Texts": []
      }
    }
  ]
}